[MediaSoup React-Native]s
작업 환경 : Ubuntu 18.06
1.	서버 셋팅
A.	Ubuntu 18.06 설치
B.	apt update
C.	apt upgrade
D.	시스템 시간 설정
i.	# dpkg-reconfigure tzdata
ii.	순서대로 Asia – Seoul 선택
iii.	시간 확인 : #date
E.	일반적으로 사용되는 프로그램 설치
i.	Vi 에디터
# apt install vim
ii.	GIT 설치
# apt install git
iii.	Unzip
# apt install unzip
iv.	Sendmail
# apt install sendmail
F.	# vi /etc/mail/local-host-names
localhost를 제외하고 나머지 항목은 지운다. 이 곳에 쓰여진 도메인은 sendmail 발송 시, 목적 메일서버조회(mx record query)를 하지않고 로컬로 보낸다.
G.	APi 설정 관리 도구 설치
# apt install software-properties-common
H.	nginx 저장소 추가
# vi /etc/apt/sources.list.d/nginx.list
(아래 내용대로 작성)
# Nginx
deb [arch=amd64,arm64] http://nginx.org/packages/mainline/ubuntu/ bionic nginx
deb-src http://nginx.org/packages/mainline/ubuntu/ bionic nginx
I.	nginx 저장소 인증키 추가
# apt install curl
# curl -sS http://nginx.org/keys/nginx_signing.key | apt-key add -
OK 라는 글자가 나오면 정상이다.
J.	MariaDB 저장소 추가
add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://sgp1.mirrors.digitalocean.com/mariadb/repo/10.4/ubuntu bionic main'
K.	MariaDB 저장소 인증키 추가
# apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
(아래 텍스트가 나오면 된다.)
Executing: /tmp/apt-key-gpghome.fCVIaNVNt0/gpg.1.sh --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
gpg: key F1656F24C74CD1D8: 7 signatures not checked due to missing keys
gpg: key F1656F24C74CD1D8: public key "MariaDB Signing Key <signing-key@mariadb.org>" imported
gpg: Total number processed: 1
gpg:               imported: 1
L.	nginx 설치
i.	# apt install nginx
ii.	# service nginx restart
자동으로 설치되고, 실행되고, 재부팅시 자동실행 되게 설정된다.
iii.	# nginx -v
설치 버전 확인
iv.	도메인 접속 시 “Welcom to nginx!” 라는 텍스트가 노출되면 정상적으로 동작하는 것이다.
M.	MariaDB 설치
i.	MariaDB 콘솔 프로그램 설치
# apt install mariadb-client
콘솔에서 mysql, mysqldump, mysqladmin 같은 명령어를 사용할 수 있게 된다.
만약 DB 클라우드 서비스(RDS 같은 서비스)를 사용할 예정이면, 나머지 단계는 건너 뛰어도 된다.
ii.	MariaDB 서버 설치
# apt install mariadb-server
설치가 완료되면 MariaDB 가 실행되며, 재부팅시에도 자동 시작되도록 설정된다.
iii.	서비스 상태확인
# service mysql status
iv.	설치된 버전 확인
#mysqladmin version
v.	기본 언어셋 설정(중요)
* 이 단계를 건너뛰면 DB가 latin1 으로 생성되며 추후 DB작업에 문제가 생길 수 있다.
1.	#vi /etc/mysql/mariadb.conf.d/override.cnt
(아래 내용 입력)
[mysqld]
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci

query_cache_type = ON
query_cache_limit = 4M
query_cache_size = 64M

max_allowed_packet = 64M

slow_query_log         = 1
slow_query_log_file    = /var/log/mysql/mysql-slow.log
long_query_time = 5

skip-log-bin

sql_mode = NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
2.	mysql 환경설정 문법 테스트 (mysql config file configtest)
# mysqld --verbose --help | grep configtest
오류 메세지가 출력되지 않는다면 정상이다.
([Note] Plugin ‘FEEDBACK’ is disabled. 메세지는 무시해도 된다.)
설정파일 오류가 없다면 mysql 을 재시작하여 적용하도록 하자.
3.	변경사항 적용
# service mysql restart
4.	변경사항 적용 확인
# mysqladmin -p variables | grep character
패스워드를 입력하라고 출력될텐데 mariadb10.4 부터는 로컬에서 접속 시, 패스워드가 없다.
5.	데이터베이스 초기화 작업 실행
# /usr/bin/mysql_secure_installation
각각의 물음에 y를 작성하고, 새로운 패스워드를 입력한다.
vi.	계정 추가
1.	# sudo useradd [계정이름]
2.	# sudo passwd [계정이름]
3.	홈 디렉토리 셍성
# mkdir [계정이름]
또는
# sudo mkdir -p [홈디렉터리 경로]
4.	sudo chown -R 계정명:계정명 [홈디렉토리 경로]
예) sudo chown -R nappeni3:nappeni3 /home/nappeni3
5.	계정 확인
# cat /etc/passwd | grep [계정이름]
N.	웹사이트 Nginx 환경설정파일 작성
# vi /etc/nginx/conf.d/default.conf
(아래 내용 작성)
server {
    listen        80;
    server_name  holypedia.co.kr www. holypedia.co.kr;
 
    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;
    location / {
        root   /home/nappeni3/www/;
        index  index.html index.htm;
    }
}
O.	Nginx 재시작
# service nginx reload
P.	Node 설치
i.	sudo apt-get install curl python-software-properties
ii.	curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash –
iii.	sudo apt-get install nodejs
iv.	node -v
npm -v
Q.	Certbot 설치
i.	Certbot 설치 전 셋팅
sudo add-apt-repository ppa:certbot/certbot
sudo apt install python-certbot-nginx
ii.	Certbot 설치
sudo apt-get install certbot
iii.	Certbot으로 인증서 발급받기
certbot --nginx -d holypedia.co.kr -d www.holypedia.co.kr
R.	SSL 자동 갱신
sudo certbot renew --dry-run
2.	카페24는 방화벽부터 열어야 한다.
outbound 추가
- 10000:59999 (TCP,UDP 모두)
inbound 추가
- 4443 (TCP)
- 10000:59999 (TCP,UDP 모두)
3.	apt-get install make
apt-get install gcc
apt-get install g++
4.	LINUX에서 mediasoup 서버 연결
A.	mediasoup-demo v3
참고 : https://github.com/versatica/mediasoup-demo/
i.	Clone the project:
1.	$ git clone https://github.com/versatica/mediasoup-demo.git
2.	$ cd mediasoup-demo
3.	$ git checkout v3
ii.	Set up the mediasoup-demo server
1.	cd server
2.	npm install
iii.	Copy config.example.js as config.js and customize it for your scenario
$ cp config.example.js config.js
iv.	Set up the mediasoup-demo browser app 
1.	cd app
2.	npm install
v.	# mkdir ./server/certs
vi.	# cd ./certs
vii.	# cp /etc/letsencrypt/live/holypedia.co.kr/fullchain.pem ./fullchain.pem
# cp /etc/letsencrypt/live/holypedia.co.kr/privkey.pem ./privkey.pem
viii.	server/config.js 파일 수정
(아래 텍스트 각각의 부분들 찾아서 수정)
domain : process.env.DOMAIN || 'holypedia.co.kr

listenIp : 0.0.0.0
listenPort : process.env.PROTOO_LISTEN_PORT || 4443

cert : process.env.HTTPS_CERT_FULLCHAIN || `/etc/letsencrypt/live/holypedia.co.kr/fullchain.pem’,
key  : process.env.HTTPS_CERT_PRIVKEY || `/etc/letsencrypt/live/holypedia.co.kr/privkey.pem’

ip          : process.env.MEDIASOUP_LISTEN_IP || '0.0.0.0',
announcedIp : process.env.MEDIASOUP_ANNOUNCED_IP || '211.110.229.104’

ip          : process.env.MEDIASOUP_LISTEN_IP || '0.0.0.0',
announcedIp : process.env.MEDIASOUP_ANNOUNCED_IP || '211.110.229.104’
ix.	Run the Node.js server application in a terminal:
1.	cd server
2.	npm start
x.	In a different terminal build and run the browser application
1.	cd app
2.	npm start
B.	Deploy it in a server
i.	Globally install gulp-cli NPM module (may need sudo)
$ npm install -g gulp-cli
ii.	Build the production ready browser application
$ cd app
$ gulp dist
iii.	server 폴더에서
$ DEBUG="*mediasoup* *ERROR* *WARN*" node server.js
C.	/etc/nginx/conf.d/default.conf 수정
server {
server_name  holypedia.co.kr www.holypedia.co.kr;
    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;
    root   /home/nappeni3/www/mediasoup-demo/server/public;
    index  index.html index.htm;
    location / {
        proxy_pass https://127.0.0.1:3000;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/holypedia.co.kr/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/holypedia.co.kr/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}
server {
    if ($host = www.holypedia.co.kr) {
        return 301 https://$host$request_uri;
    } # managed by Certbot
    if ($host = holypedia.co.kr) {
        return 301 https://$host$request_uri;
    } # managed by Certbot
    listen       80;
    server_name  holypedia.co.kr www.holypedia.co.kr;
    return 404; # managed by Certbot
}
D.	Nginx 재시작
# service nginx restart
5.	mediasoup react-native
참고 : https://mediasoup.org/documentation/v3/mediasoup-client/react-native/
A.	윈도우(Windows)에 react native 개발 환경 구축하기
관리자 권한으로 CMD를 실행  후 명령어들을 실행한다.
참고 : https://dev-yakuza.github.io/ko/react-native/install-on-windows/
i.	Chocolatey 설치
Chocolatey는 윈도우(Windows)에서 필요한 패키지를 설치하고 관리하는 윈도우(Windows)용 패키지 관리자이다.

@"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
ii.	cmd 재실행
iii.	Chocolately 설치 확인
choco –version
iv.	choco install -y nodejs.install
v.	node –version
npm –version
vi.	choco install -y python2
python –version
vii.	npm install -g react-native-cli
react-native –version
viii.	choco install -y jdk8
java -version
ix.	android studio 설치
x.	android studio SDK 설정
1.	Configure > SDK Manger를 선택하여 안드로이드 SDK 설정 화면으로 이동
2.	아래 내용 선택
A.	Android SDK Platform 28
B.	Intel x86 Atom System Image
C.	Google APIs Intel x86 Atom System Image
D.	Google APIs Intel x86 Atom_64 System Image
3.	환경 변수 설정
A.	내 컴퓨터 - 시스템 속성 – 고급 – 환경변수로 이동
B.	사용자 변수 추가
변수 이름 : ANDROID_HOME
변수 값 : C:\Users\kimjaemin\AppData\Local\Android\Sdk
C.	시스템 변수의 Path 편집 – 새로 만들기
C:\Users\kimjaemin\AppData\Local\Android\Sdk\platform-tools
4.	cmd 재실행 후 “adb” 입력 후 실행
Android Debug Bridge version 1.0.41
Version 29.0.5-5949299
Installed as C:\Users\kimjaemin\AppData\Local\Android\Sdk\platform-tools\adb.exe
B.	react-native 프로젝트 생성
react-native는 버전에 따라, 잘 동작하던 앱이 동작을 안하거나, 빌드할 때 에러가 발생하는 등 여러 문제들을 일으킬 가능성이 높다. 그러므로 react-native로 앱을 개발할 때는 npm 명령어를 통해 버전을 고정하여 사용하는 것을 권장한다.
i.	npm config set save-exact=true
ii.	프로젝트 폴더 생성 후 경로 이동
cd [폴더명]
iii.	react-native init [프로젝트명]
iv.	안드로이드 스튜디오를 실행하여 애뮬레이터 실행 후 아래의 명령어 실행
cd SampleApp
# react-native run-android
npm run android
